<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>tango</title><link>https://evilvlso.github.io</link><description>just tango </description><copyright>tango</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/25767862?v=4</url><title>avatar</title><link>https://evilvlso.github.io</link></image><lastBuildDate>Tue, 02 Apr 2024 08:50:36 +0000</lastBuildDate><managingEditor>tango</managingEditor><ttl>60</ttl><webMaster>tango</webMaster><item><title>Python操作excel-openpyxl</title><link>https://evilvlso.github.io/post/Python-cao-zuo-excel-openpyxl.html</link><description>&gt; openpyxl是一个很好用的操作excel的库&#13;
&gt; &#13;
&gt; 常用的操作：&#13;
&gt; &#13;
&gt;  * 添加表头 **add_sheet**&#13;
&gt;  * 添加数据(元组) **add_data**&#13;
&gt;  * 设置表头格式(仅字体)  **set_header_font**&#13;
&gt;  * 删除 **sheet delete_sheet**&#13;
&gt;  * 保存excel **save**&#13;
&gt; &#13;
&gt; 还有很多友好的操作&#13;
&#13;
```Python&#13;
class Xlsx():&#13;
    def __init__(self):&#13;
        self.workbook = Workbook()&#13;
        self.index=1&#13;
        pass&#13;
&#13;
    def add_sheet(self,sheetname="Sheet"):&#13;
        return self.workbook.create_sheet(sheetname,self.index+1)&#13;
&#13;
    def add_data(self,data,sheet="Sheet"):&#13;
        '''&#13;
        :param sheet :sheet对象&#13;
        :param data: data最好是一个元组&#13;
        :return:&#13;
        '''&#13;
        if isinstance(data,tuple):&#13;
            sheet.append(data)&#13;
        else:&#13;
            sheet.append(tuple(data))&#13;
&#13;
    def set_header_font(self,sheetname="Sheet"):&#13;
        '''&#13;
        格式化行头&#13;
        :param sheetname:&#13;
        :return:&#13;
        '''&#13;
        font = Font(u'宋体', size=13, bold=True, color='000000')&#13;
        for i in sheetname["1"]:&#13;
            i.font = font&#13;
            &#13;
    def delete_sheet(self,sheetname="Sheet"):&#13;
        '''&#13;
        删除sheet&#13;
        :param sheetname:&#13;
        :return:&#13;
        '''&#13;
        self.workbook.remove(self.workbook[sheetname])&#13;
&#13;
    def save(self,filename):&#13;
        self.workbook.save(filename)&#13;
```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/Python-cao-zuo-excel-openpyxl.html</guid><pubDate>Tue, 02 Apr 2024 08:50:09 +0000</pubDate></item><item><title>QtNetwork和QtTableview的使用</title><link>https://evilvlso.github.io/post/QtNetwork-he-QtTableview-de-shi-yong.html</link><description>## Qt Network&#13;
&#13;
1. 同步请求数据&#13;
&#13;
   ```c++&#13;
   QNetworkAccessManager *mgr = new QNetworkAccessManager(this);&#13;
   const QUrl url(QStringLiteral("http://myserver.com/api"));&#13;
   QNetworkRequest request(url);&#13;
   request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");&#13;
   &#13;
   QJsonObject obj;&#13;
   obj["key1"] = "value1";&#13;
   obj["key2"] = "value2";&#13;
   QJsonDocument doc(obj);&#13;
   QByteArray data = doc.toJson();&#13;
   // or&#13;
   // QByteArray data("{\"key1\":\"value1\",\"key2\":\"value2\"}");&#13;
   QNetworkReply *reply = mgr-&gt;post(request, data);&#13;
   &#13;
   QObject::connect(reply, &amp;QNetworkReply::finished, [=](){&#13;
       if(reply-&gt;error() == QNetworkReply::NoError){&#13;
           QString contents = QString::fromUtf8(reply-&gt;readAll());&#13;
           qDebug() &lt;&lt; contents;&#13;
       }&#13;
       else{&#13;
           QString err = reply-&gt;errorString();&#13;
           qDebug() &lt;&lt; err;&#13;
       }&#13;
       reply-&gt;deleteLater();&#13;
   });&#13;
   ```&#13;
&#13;
* TableView 初始化&#13;
&#13;
```c++&#13;
void myc::setTableHead()&#13;
{&#13;
    if(ui-&gt;tableView-&gt;model()==nullptr){&#13;
      QStandardItemModel *  theModel = new QStandardItemModel(ui-&gt;tableView);&#13;
      ui-&gt;tableView-&gt;setModel(theModel);&#13;
   		 }&#13;
    QStandardItemModel * theModel = (QStandardItemModel*) ui-&gt;tableView-&gt;model();&#13;
	 theSelection = new QItemSelectionModel(theModel);//选中模型类 从ui中获取 而不是设置类成员&#13;
	 ui-&gt;tableView-&gt;setSelectionModel(theSelection);&#13;
    QStringList headerList;&#13;
    headerList&lt;&lt;"序号"&lt;&lt;"报告编号"&lt;&lt;"姓名"&lt;&lt;"性别"&lt;&lt;"创建时间";&#13;
    theModel-&gt;setHorizontalHeaderLabels(headerList);&#13;
    theModel-&gt;setRowCount(5);  //设置表格行数 &#13;
    ui-&gt;tableView-&gt;setGridStyle(Qt::SolidLine);&#13;
    ui-&gt;tableView-&gt;horizontalHeader()-&gt;setStretchLastSection(true);&#13;
    ui-&gt;tableView-&gt;horizontalHeader()-&gt;setSectionResizeMode(QHeaderView::ResizeToContents);&#13;
    ui-&gt;tableView-&gt;verticalHeader()-&gt;setVisible(true);   // 是否隐藏列表头&#13;
    ui-&gt;tableView-&gt;setEditTriggers(QAbstractItemView::NoEditTriggers); //是否可编辑 cell&#13;
    ui-&gt;tableView-&gt;setContextMenuPolicy(Qt::CustomContextMenu);    //弹出右键菜单策略&#13;
    ui-&gt;tableView-&gt;setSelectionBehavior(QAbstractItemView::SelectRows); //一选就选择整行&#13;
    ui-&gt;tableView-&gt;setSelectionMode(QAbstractItemView::SingleSelection); //只选择一行/多行&#13;
}&#13;
```&#13;
&#13;
* 添加一行数据&#13;
&#13;
  ```c++&#13;
  void myc::querybtn_clicked()&#13;
  {&#13;
      &#13;
      QStandardItemModel * theModel = (QStandardItemModel*)ui-&gt;tableView-&gt;model();&#13;
      int start= theModel-&gt;rowCount();  // 有start也就是从表格现有的行数下一个开始&#13;
      QString sql =  QString("select * from patients");&#13;
      QList&lt;QList&lt;QVariant&gt;&gt; query_list = con-&gt;dbquery(sql);&#13;
      for(int i=0;i&lt;query_list.length();i++){&#13;
          QList&lt;QStandardItem*&gt; ItemList;&#13;
          ItemList&lt;&lt;(new QStandardItem(query_list[i][0].toString()));&#13;
          ItemList&lt;&lt;(new QStandardItem(query_list[i][1].toString()));&#13;
          ItemList&lt;&lt;(new QStandardItem(query_list[i][2].toString()));&#13;
          ItemList&lt;&lt;(new QStandardItem(query_list[i][3].toString()=="0"?"女":"男"));&#13;
          ItemList&lt;&lt;(new QStandardItem(query_list[i][4].toString()));&#13;
          theModel-&gt;insertRow(i+start,ItemList);  // 插入&#13;
      }&#13;
  &#13;
  ```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/QtNetwork-he-QtTableview-de-shi-yong.html</guid><pubDate>Tue, 02 Apr 2024 08:49:31 +0000</pubDate></item><item><title>redis面试问题</title><link>https://evilvlso.github.io/post/redis-mian-shi-wen-ti.html</link><description># 快的原因&#13;
&#13;
1. 基于内存实现的&#13;
2. 采用io多路复用模型。</description><guid isPermaLink="true">https://evilvlso.github.io/post/redis-mian-shi-wen-ti.html</guid><pubDate>Tue, 02 Apr 2024 08:45:56 +0000</pubDate></item><item><title>scrapy启动多spider</title><link>https://evilvlso.github.io/post/scrapy-qi-dong-duo-spider.html</link><description>### 好使&#13;
```Python&#13;
import scrapy&#13;
from scrapy.crawler import CrawlerProcess&#13;
from scrapy.utils.project import get_project_settings&#13;
process = CrawlerProcess(get_project_settings())&#13;
# 指定多个spider&#13;
process.crawl("fen")&#13;
process.crawl("fuck")&#13;
# 执行所有 spider&#13;
# for spider_name in process.spider_loader.list():&#13;
#     print(spider_name)&#13;
    # process.crawl(spider_name)&#13;
process.start()&#13;
&#13;
```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/scrapy-qi-dong-duo-spider.html</guid><pubDate>Tue, 02 Apr 2024 08:43:47 +0000</pubDate></item><item><title>雪花算法</title><link>https://evilvlso.github.io/post/xue-hua-suan-fa.html</link><description>&gt; `7uQJnf1B3NnRjV` 像这种掺杂数字字母的字符串就是雪花算法生成的。</description><guid isPermaLink="true">https://evilvlso.github.io/post/xue-hua-suan-fa.html</guid><pubDate>Tue, 02 Apr 2024 08:43:11 +0000</pubDate></item><item><title>matplotlib画子图代码示例</title><link>https://evilvlso.github.io/post/matplotlib-hua-zi-tu-dai-ma-shi-li.html</link><description>## subplot画子图&#13;
```python&#13;
for index,n in enumerate(imgName):&#13;
    plt.subplot(params["batch_size"],params["batch_size"],index*3+1,title="Input" if index==0 else "")&#13;
    plt.imshow(x[index].transpose(0,1).transpose(1,2).contiguous())&#13;
    plt.axis("off") # 去掉 x y轴&#13;
    plt.subplot(params["batch_size"],params["batch_size"],index*3+2,title="GT)&#13;
    plt.imshow(y[index],cmap="gray")&#13;
    plt.axis("off")&#13;
    plt.subplot(params["batch_size"],params["batch_size"],index*3+3,title="Mask")&#13;
    plt.imshow(mask[index],cmap="gray")&#13;
    plt.axis("off")&#13;
    # plt.subplots_adjust(left=0.027,&#13;
    #                     bottom=0,&#13;
    #                     right=0.99,&#13;
    #                     top=0.93,&#13;
    #                     wspace=0.005,&#13;
    #                     hspace=0.045)&#13;
    fig.tight_layout()&#13;
```&#13;
&#13;
## subplots画子图&#13;
&#13;
```python&#13;
fig,axes=plt.subplots(params["batch_size"],params["batch_size"])&#13;
for index,n in enumerate(imgName):&#13;
    axes[index,0].imshow(x[index].transpose(0,1).transpose(1,2).contiguous())&#13;
    axes[index, 0].axis("off")&#13;
    axes[index,1].imshow(y[index],cmap="gray")&#13;
    axes[index, 1].axis("off")&#13;
    axes[index,2].imshow(mask[index],cmap="gray")&#13;
    axes[index, 2].axis("off")&#13;
    axes[0,0].set_title("Input")&#13;
    axes[0,1].set_title("GT")&#13;
    axes[0,2].set_title("Mask")&#13;
    plt.subplots_adjust(left=0.027,&#13;
                            bottom=0,&#13;
                            right=0.99,&#13;
                            top=0.93,&#13;
                            wspace=0.005,&#13;
                            hspace=0.045)&#13;
```&#13;
。</description><guid isPermaLink="true">https://evilvlso.github.io/post/matplotlib-hua-zi-tu-dai-ma-shi-li.html</guid><pubDate>Tue, 02 Apr 2024 08:42:22 +0000</pubDate></item><item><title>Ubuntu安装chrome脚本</title><link>https://evilvlso.github.io/post/Ubuntu-an-zhuang-chrome-jiao-ben.html</link><description>---&#13;
```Shell&#13;
#!/bin/bash&#13;
apt-get update&#13;
apt-get install -y libxss1 libappindicator1 libindicator7&#13;
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&#13;
dpkg -i  google-chrome-stable_current_amd64.deb&#13;
```&#13;
### 如果报错了&#13;
`apt-get install -y -f ` 就OK👌了。</description><guid isPermaLink="true">https://evilvlso.github.io/post/Ubuntu-an-zhuang-chrome-jiao-ben.html</guid><pubDate>Tue, 02 Apr 2024 08:37:41 +0000</pubDate></item><item><title>uwsgi配置以及使用</title><link>https://evilvlso.github.io/post/uwsgi-pei-zhi-yi-ji-shi-yong.html</link><description>### 使用&#13;
```&#13;
uwsgi --ini uwsgi.ini             # 启动&#13;
uwsgi --reload uwsgi.pid          # 重启&#13;
uwsgi --stop uwsgi.pid            # 关闭&#13;
```&#13;
&lt;!--more--&gt;&#13;
### 配置&#13;
```&#13;
[uwsgi]&#13;
chdir=/opt/   &#13;
&#13;
callable=app  #flask专用&#13;
home=/root/env/&#13;
wsgi-file=xdbg/wsgi.py&#13;
master=true&#13;
py-autoreload=1                              # py文件修改，自动加载&#13;
processes=4&#13;
threads=2&#13;
&#13;
pidfile=%(chdir)/uwsgi.pid&#13;
socket=/socket/uwsgi.sock&#13;
chmod-socket = 664&#13;
vacuum=true    #退出uwsgi是否清理中间文件，包含pid、sock和status文件&#13;
daemonize=%(chdir)/cloudmonitor.log  #配合supervisor去掉并且改到stdout_logfile docker中要去掉&#13;
static-map = /static=/opt/static&#13;
```&#13;
&#13;
&gt; 参考 https://www.jianshu.com/p/c3b13b5ad3d7。</description><guid isPermaLink="true">https://evilvlso.github.io/post/uwsgi-pei-zhi-yi-ji-shi-yong.html</guid><pubDate>Tue, 02 Apr 2024 08:35:33 +0000</pubDate></item><item><title>vimrc备份</title><link>https://evilvlso.github.io/post/vimrc-bei-fen.html</link><description>&gt; 万古长青的编辑器 **vim**&#13;
&gt; &#13;
&gt; 而且X格满满&#13;
&#13;
### vimrc&#13;
```&#13;
set nocompatible  &#13;
set hlsearch&#13;
set number  &#13;
set history=1000&#13;
set background=dark &#13;
syntax on  &#13;
set autoindent &#13;
set tabstop=4&#13;
set expandtab&#13;
set shiftwidth=4&#13;
&#13;
let mapleader=","&#13;
&#13;
" colors&#13;
set background=dark&#13;
colorscheme hybrid&#13;
&#13;
" jklh&#13;
map &lt;C-j&gt; &lt;C-W&gt;j&#13;
map &lt;C-k&gt; &lt;C-W&gt;k&#13;
map &lt;C-h&gt; &lt;C-W&gt;h&#13;
map &lt;C-l&gt; &lt;C-W&gt;l&#13;
&#13;
" vim-plug&#13;
call plug#begin('~/.vim/plugged')&#13;
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }&#13;
Plug 'yggdroot/indentline'&#13;
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }&#13;
Plug 'majutsushi/tagbar'&#13;
Plug 'tpope/vim-commentary'&#13;
&#13;
call plug#end()&#13;
" NERDTree&#13;
let NERDTreeWinSize=25&#13;
map &lt;F9&gt; :NERDTreeToggle&lt;CR&gt;&#13;
&#13;
" indentline&#13;
let g:indentline_char = '¦'&#13;
&#13;
&#13;
" Tagbar&#13;
nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;&#13;
let g:tagbar_ctags_bin = "/usr/local/bin/ctags"&#13;
let g:tagbar_width=28&#13;
&#13;
&#13;
" python-mode&#13;
let g:pymode_rope = 1&#13;
let g:pymode_rope_completion = 1&#13;
let g:pymode_rope_complete_on_dot = 1&#13;
set completeopt=menuone,noinsert&#13;
&#13;
" let g:pymode_rope_completion_bind = ''&#13;
" Documentation&#13;
let g:pymode_doc = 0&#13;
let g:pymode_doc_key = 'K'&#13;
"Linting&#13;
let g:pymode_lint = 1&#13;
let g:pymode_lint_checker = "pyflakes,pep8"&#13;
" let g:pymode_lint_on_write = 1&#13;
" Support virtualenv&#13;
let g:pymode_virtualenv = 1&#13;
" Enable breakpoints plugin&#13;
let g:pymode_breakpoint = 1&#13;
let g:pymode_breakpoint_bind = '&lt;leader&gt;b'&#13;
" syntax highlighting&#13;
let g:pymode_syntax = 1&#13;
let g:pymode_syntax_all = 1&#13;
let g:pymode_syntax_indent_errors = g:pymode_syntax_all&#13;
let g:pymode_syntax_space_errors = g:pymode_syntax_all&#13;
" Don't autofold code&#13;
let g:pymode_folding = 0&#13;
let g:pymode_run = 1&#13;
let g:pymode_run_bind = '&lt;leader&gt;r'&#13;
" find definition&#13;
let g:pymode_rope_goto_definition_bind = '&lt;C-c&gt;g'&#13;
let g:pymode_rope_goto_definition_cmd = 'new'&#13;
&#13;
```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/vimrc-bei-fen.html</guid><pubDate>Tue, 02 Apr 2024 08:33:51 +0000</pubDate></item><item><title>vscode中python环境配置文件</title><link>https://evilvlso.github.io/post/vscode-zhong-python-huan-jing-pei-zhi-wen-jian.html</link><description>有两个配置文件 :&#13;
settings.json - 用来运行的配置&#13;
launch.json  -  用来调试的配置&#13;
&gt; 划取代码运行使用的是 settings.json 配置  &#13;
&gt; vscode 下面的解释器选择可以直接更改两个文件的 python 解释器路径&#13;
&#13;
配置展示:  &#13;
settings.json  &#13;
&#13;
```JSON&#13;
{&#13;
    "launch": {&#13;
&#13;
        "configurations": [&#13;
            {"name":"Launch",&#13;
            "type":"python",&#13;
            "request":"launch",&#13;
            "console": "integratedTerminal",&#13;
            "cwd":"${fileDirname}", ## 解决执行路径问题&#13;
             //工作路径用打开的顶层目录，影响文件读写相对路径&#13;
            //"cwd": "${workspaceFolder}", &#13;
            //工作路径用当前文件所在目录，影响文件读写相对路径&#13;
            //"cwd": "${fileDirname}",&#13;
            //sys.path 会加入顶层目录，影响模块导入查询路径&#13;
            //"env": { "PYTHONPATH": "${workspaceFolder}" }&#13;
            }&#13;
        ],&#13;
        "compounds": []&#13;
    },&#13;
    "python.pythonPath": "/usr/local/anaconda3/envs/mrcnn/bin/python"&#13;
}&#13;
```&#13;
launch.json  &#13;
```JSON&#13;
{&#13;
    "version": "0.2.0",&#13;
    "configurations": [&#13;
&#13;
        {&#13;
            "name": "Python: base",&#13;
            "type": "python",&#13;
            "request": "launch",&#13;
            "program": "${file}",&#13;
            "console": "integratedTerminal",&#13;
            "pythonPath": "/usr/local/anaconda3/bin/python"&#13;
        },&#13;
        {&#13;
            "name": "Python: env",&#13;
            "type": "python",&#13;
            "request": "launch",&#13;
            "program": "${file}",&#13;
            "console": "integratedTerminal",&#13;
            "pythonPath": "~/env/bin/python"&#13;
        },&#13;
        {&#13;
            "name": "Python: mrcnn",&#13;
            "type": "python",&#13;
            "request": "launch",&#13;
            "program": "${file}",&#13;
            "console": "integratedTerminal",&#13;
            "pythonPath": "/usr/local/anaconda3/envs/mrcnn/bin/python"&#13;
        },&#13;
    ]&#13;
&#13;
}&#13;
```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/vscode-zhong-python-huan-jing-pei-zhi-wen-jian.html</guid><pubDate>Tue, 02 Apr 2024 08:31:22 +0000</pubDate></item><item><title>Golang碎片化学习笔记</title><link>https://evilvlso.github.io/post/Golang-sui-pian-hua-xue-xi-bi-ji.html</link><description># Golang碎片化学习笔记&#13;
&#13;
- `counter := map[int]int{}  和 counter := make(map[int]int)`是等价的，直接上去{}初始化更装&#13;
&#13;
- 对slice，map进行for遍历，得到的值取决于用几个值接收&#13;
&#13;
  ```Golang&#13;
  for i,k := range slice  #i为索引  k为值&#13;
  for i := range slice # 则i仅为索引&#13;
  &#13;
  for k,v := range map  # key value都能取到&#13;
  for k := range map # 只有k&#13;
  ```&#13;
&#13;
- `make`创建的slice map 会初始化为该类型的零值，返回变量&#13;
&#13;
  ```Golang&#13;
  a:=make([]int,2)&#13;
  a[0]  #0 &#13;
  a[1]  # 0&#13;
  ```&#13;
&#13;
- `container/list`这是一个双向链表，他的主要方法有：&#13;
&#13;
  ```Golang&#13;
  l:=list.New()&#13;
  l.Front()&#13;
  l.Back()&#13;
  l.PushBack(你的数据)&#13;
  l.PushFront(你的数据)&#13;
  l.Remove(e) #e一定是他的Element类型 比如 l.Front 而不是你的数据  e.Value才是你的数据&#13;
  l.MoveFront(e) #e是Element类型 将要移动的数据&#13;
  l.MoveBack(e)&#13;
  ```&#13;
&#13;
&#13;
- 字符串遍历的结果是???&#13;
&#13;
  ```go&#13;
  a := "asdasf"&#13;
  for _, c := range a {&#13;
    fmt.Println(c)&#13;
  }&#13;
  #97&#13;
  115&#13;
  100&#13;
  97&#13;
  115&#13;
  102&#13;
  a := "够神呐虐"&#13;
  for _,i := range a {&#13;
    fmt.Println(i)&#13;
  }&#13;
  #&#13;
  22815&#13;
  31070&#13;
  21584&#13;
  34384&#13;
  ```&#13;
&#13;
- Slice取最后一个元素 索引不能是-1 &#13;
&#13;
  ```go&#13;
  	a := []int{}&#13;
  	fmt.Println(a[-1])  # must be a non-negtive&#13;
  	fmt.Println(a[len(a)-1])&#13;
  ```&#13;
&#13;
- `len()`获得的中文字符串长度不是你想的，获取的是字节长度&#13;
&#13;
  ```&#13;
  	a := "够神呐虐"&#13;
  	fmt.Println(len(a)) # 12 fuck&#13;
  	b := []rune(a)   # 4&#13;
  	b := []byte(a)  # 4  &#13;
  ```&#13;
&#13;
&#13;
-  **Printf、Sprintf、Fprintf区别**&#13;
&#13;
  # ![image-20220427171722010](https://raw.githubusercontent.com/evilvlso/picsbed/master/image-20220427171722010.png)&#13;
&#13;
- 小写变量在**本包内**可以访问&#13;
&#13;
- 字符串匹配&#13;
&#13;
- ```&#13;
  pattern []string&#13;
  pattern[0]=="a"  ??&#13;
  ```&#13;
&#13;
- 使用unicode筛选匹配中文&#13;
&#13;
 ```&#13;
  # 匹配所有汉字&#13;
  print(re.findall('[\u4e00-\u9fa5]', data))&#13;
 ```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/Golang-sui-pian-hua-xue-xi-bi-ji.html</guid><pubDate>Tue, 02 Apr 2024 08:18:23 +0000</pubDate></item></channel></rss>