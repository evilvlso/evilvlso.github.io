<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>tango</title><link>https://evilvlso.github.io</link><description>just tango </description><copyright>tango</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/25767862?v=4</url><title>avatar</title><link>https://evilvlso.github.io</link></image><lastBuildDate>Tue, 02 Apr 2024 08:28:28 +0000</lastBuildDate><managingEditor>tango</managingEditor><ttl>60</ttl><webMaster>tango</webMaster><item><title>Golang碎片化学习笔记</title><link>https://evilvlso.github.io/post/Golang-sui-pian-hua-xue-xi-bi-ji.html</link><description># Golang碎片化学习笔记&#13;
&#13;
- `counter := map[int]int{}  和 counter := make(map[int]int)`是等价的，直接上去{}初始化更装&#13;
&#13;
- 对slice，map进行for遍历，得到的值取决于用几个值接收&#13;
&#13;
  ```Golang&#13;
  for i,k := range slice  #i为索引  k为值&#13;
  for i := range slice # 则i仅为索引&#13;
  &#13;
  for k,v := range map  # key value都能取到&#13;
  for k := range map # 只有k&#13;
  ```&#13;
&#13;
- `make`创建的slice map 会初始化为该类型的零值，返回变量&#13;
&#13;
  ```Golang&#13;
  a:=make([]int,2)&#13;
  a[0]  #0 &#13;
  a[1]  # 0&#13;
  ```&#13;
&#13;
- `container/list`这是一个双向链表，他的主要方法有：&#13;
&#13;
  ```Golang&#13;
  l:=list.New()&#13;
  l.Front()&#13;
  l.Back()&#13;
  l.PushBack(你的数据)&#13;
  l.PushFront(你的数据)&#13;
  l.Remove(e) #e一定是他的Element类型 比如 l.Front 而不是你的数据  e.Value才是你的数据&#13;
  l.MoveFront(e) #e是Element类型 将要移动的数据&#13;
  l.MoveBack(e)&#13;
  ```&#13;
&#13;
&#13;
- 字符串遍历的结果是???&#13;
&#13;
  ```go&#13;
  a := "asdasf"&#13;
  for _, c := range a {&#13;
    fmt.Println(c)&#13;
  }&#13;
  #97&#13;
  115&#13;
  100&#13;
  97&#13;
  115&#13;
  102&#13;
  a := "够神呐虐"&#13;
  for _,i := range a {&#13;
    fmt.Println(i)&#13;
  }&#13;
  #&#13;
  22815&#13;
  31070&#13;
  21584&#13;
  34384&#13;
  ```&#13;
&#13;
- Slice取最后一个元素 索引不能是-1 &#13;
&#13;
  ```go&#13;
  	a := []int{}&#13;
  	fmt.Println(a[-1])  # must be a non-negtive&#13;
  	fmt.Println(a[len(a)-1])&#13;
  ```&#13;
&#13;
- `len()`获得的中文字符串长度不是你想的，获取的是字节长度&#13;
&#13;
  ```&#13;
  	a := "够神呐虐"&#13;
  	fmt.Println(len(a)) # 12 fuck&#13;
  	b := []rune(a)   # 4&#13;
  	b := []byte(a)  # 4  &#13;
  ```&#13;
&#13;
&#13;
-  **Printf、Sprintf、Fprintf区别**&#13;
&#13;
  # ![image-20220427171722010](https://raw.githubusercontent.com/evilvlso/picsbed/master/image-20220427171722010.png)&#13;
&#13;
- 小写变量在**本包内**可以访问&#13;
&#13;
- 字符串匹配&#13;
&#13;
- ```&#13;
  pattern []string&#13;
  pattern[0]=="a"  ??&#13;
  ```&#13;
&#13;
- 使用unicode筛选匹配中文&#13;
&#13;
 ```&#13;
  # 匹配所有汉字&#13;
  print(re.findall('[\u4e00-\u9fa5]', data))&#13;
 ```。</description><guid isPermaLink="true">https://evilvlso.github.io/post/Golang-sui-pian-hua-xue-xi-bi-ji.html</guid><pubDate>Tue, 02 Apr 2024 08:18:23 +0000</pubDate></item></channel></rss>